# The expected input image dimensions.
input_width: 4608
input_height: 3456
# The scale factor to apply for the patches we extract.
patch_scale: 0.25

# The shape of the density maps to use. Note that this is derived only from the input
# dimensions, and the effects of patching are ignored.
# (These are derived from the expected input dimensions, down-sampled by a factor of 8).
density_map_width: 576
density_map_height: 432
# The standard deviation to use for the gaussian kernel when creating density maps.
density_map_sigma: 1

# Batch size to use for training.
batch_size: 8
# Number of batches to pre-fetch into memory.
# (Increasing this can increase training performance at the expense of memory usage.)
num_prefetch_batches: 10

# Directory to use for storing Tensorboard output.
tensorboard_output_dir: ${log_dir}/tensorboard
# Frequency at which to generate histograms for Tensorboard output.
histogram_frequency: 20
# Every time this many epochs elapse, it will generate new density map visualizations.
visualization_period: 100
# Density threshold to use for colorization. Any pixel with a density above this
# threshold will show up as the maximum density color.
max_density_threshold: 0.02

# Whether we want to classify counts instead of regressing them.
classify_counts: False
# A list of the minimum count values that will go in each discrete
# count bucket. Note that the highest bucket will contain anything
# that falls between the largest minimum value and infinity.
bucket_min_values: []
# Whether we want to try to balance the distribution of counts
# through oversampling our training dataset.
balance_counts: False
# The size to use for our oversampled dataset if that is enabled.
# Ideally, this should be >= the size of the original dataset.
balanced_dataset_size: 0

# Learning phases to use for training the base model.
base_learning_phases:
  # The initial learning rate to use for the phase.
  - learning_rate:
      # Initial learning rate value.
      initial: 0.002
      # Specify that we want to decay over time.
      decay: true
      # Number of steps to decay over.
      decay_steps: 90
      # Used to derive the number of iterations in the i-th period.
      t_mul: 2.0
      # Used to derive the initial learning rate of the i-th period.
      m_mul: 1.0
      # Minimum learning rate to hit.
      min_learning_rate: 0.00001
    # The momentum to use for the phase.
    momentum: 0.9
    # The loss weight for density maps.
    density_map_loss_weight: 1.0
    # The loss weight for counts.
    count_loss_weight: 0.0
    # Number of epochs to train for in this phase.
    num_epochs: 630

# Learning phases to use for training the refined model.
refined_learning_phases:
  # Add an additional phase for optimizing the count loss.
  - learning_rate:
      initial: 0.0001
      decay: true
      decay_steps: 90
      t_mul: 2.0
      m_mul: 1.0
      min_learning_rate: 1.0e-6
    momentum: 0.9
    density_map_loss_weight: 1.0
    count_loss_weight: 1.0e-5
    num_epochs: 310
