_cvat_credentials: &cvat_credentials
  host: "https://localhost:8080/api/v1"
  credentials:
    username: user
    password: password

# Cotton counting dataset from CVAT containing full images.
cotton_part_a:
  type: pycvat.CvatDataSet
  task_id: 2
  << : *cvat_credentials

cotton_part_b_2021_09_17:
  type: pycvat.CvatDataSet
  task_id: 4
  << : *cvat_credentials

# The images to use for the test and validation sets, which come
# from a different session.
cotton_part_a_test:
  type: pycvat.CvatDataSet
  task_id: 129
  << : *cvat_credentials

# Additional images to use for testing and validation.
cotton_part_a_test_alternate:
  type: pycvat.CvatDataSet
  task_id: 176
  << : *cvat_credentials

# Cotton counting datasets from CVAT containing image patches with
# image-level annotations.
cotton_patches_1:
  type: pycvat.CvatDataSet
  task_id: 13
  << : *cvat_credentials

# Cotton counting dataset annotations, stored locally. These come
# in training and testing flavors which correspond to annotations
# from cotton_part_a and cotton_part_a_test, respectively.
local_annotations_train:
  type: pandas.ParquetDataSet
  filepath: data/03_primary/annotations/annotations_train.parquet
  versioned: True

local_annotations_test:
  type: pandas.ParquetDataSet
  filepath: data/03_primary/annotations/annotations_test.parquet
  versioned: True

local_annotations_test_alternate:
  type: pandas.ParquetDataSet
  filepath: data/03_primary/annotations/annotations_test_alternate.parquet
  versioned: True

# TFRecord dataset of training split.
tfrecord_train:
  type: cotton_counter.data_sets.TfRecordsDataSet
  filepath: data/05_model_input/train.tfrecord
  versioned: True

# TFRecord dataset of testing split.
tfrecord_test:
  type: cotton_counter.data_sets.TfRecordsDataSet
  filepath: data/05_model_input/test.tfrecord
  versioned: True

# TFRecord dataset of validation split.
tfrecord_validate:
  type: cotton_counter.data_sets.TfRecordsDataSet
  filepath: data/05_model_input/validate.tfrecord
  versioned: True

# TFRecord dataset containing alternate testing data.
tfrecord_test_alternate:
  type: cotton_counter.data_sets.TfRecordsDataSet
  filepath: data/05_model_input/test_alternate.tfrecord
  versioned: True

# TFRecord dataset of tag-annotated patches. It's split
# into separate datasets for negative and positive examples,
# to make class balancing easy.
tfrecord_tagged_patches_positive:
  type: cotton_counter.data_sets.TfRecordsDataSet
  filepath: data/05_model_input/positive_patches.tfrecord
  versioned: True

tfrecord_tagged_patches_negative:
  type: cotton_counter.data_sets.TfRecordsDataSet
  filepath: data/05_model_input/negative_patches.tfrecord
  versioned: True

# Intermediate TF Datasets containing pre-processed data.
training_data:
  type: MemoryDataSet
  copy_mode: assign

testing_data:
  type: MemoryDataSet
  copy_mode: assign

testing_data_alternate:
  type: MemoryDataSet
  copy_mode: assign

validation_data:
  type: MemoryDataSet
  copy_mode: assign

# A dataset containing validation data but with no patches extracted.
validation_data_no_patches:
  type: MemoryDataSet
  copy_mode: assign

testing_data_alt_no_patches:
  type: MemoryDataSet
  copy_mode: assign

# A dataset containing validation data along with the raw point annotations.
validation_data_raw_annotations:
  type: MemoryDataSet
  copy_mode: assign

# A manager for the combined training dataset.
dataset_manager:
  type: MemoryDataSet
  copy_mode: assign

_model_args: &model_args
  type: tensorflow.TensorFlowModelDataset
  load_args:
    # Compiling during loading doesn't work with custom loss functions.
    compile: False
  save_args:
    save_format: h5
  versioned: True

# Saved model, produced at the end of training.
trained_model:
  filepath: ${output_data_dir}/06_models/fully_trained.hd5
  << : *model_args
